@page "/admin-panel"

@using EShopWeb.Data.Models
@using EShopWeb.Services.ProductService
@using EShopWeb.Services.UserService
@using BlazorBootstrap
@rendermode InteractiveServer

@inject IProductService ProductService
@inject IUserService UserService
@inject NavigationManager NavigationManager

@if (!IsAdmin)
{
    <div class="container mt-5">
        <div class="alert alert-danger text-center">
            <h2>Access Denied</h2>
            <p>You do not have permission to access this page.</p>
        </div>
    </div>
}
else
{
    <h1 class="text-center mb-4">Admin Panel</h1>

    <Notification Message="@notificationMessage" IsVisible="@isNotificationVisible" OnClose="ClearNotification" />

    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="border rounded p-4 shadow-sm">
                    <h2>Categories</h2>

                    <div class="mb-3">
                        <label for="categorySelect" class="form-label">Select Category:</label>
                        <select id="categorySelect" class="form-control" @onchange="SelectCategory">
                            <option value="">Add New Category</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.CategoryID">@category.CategoryName</option>
                            }
                        </select>
                    </div>

                    <CategoryForm Category="@selectedCategory"
                                  IsEditing="@isEditingCategory"
                                  OnSave="SaveCategory"
                                  OnClear="ClearFormCategory"
                                  OnDelete="DeleteCategory" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="border rounded p-4 shadow-sm">
                    <h2>Products</h2>

                    <div class="mb-3">
                        <label for="filterCategory" class="form-label">Filter by Category:</label>
                        <select id="filterCategory" class="form-control" @onchange="FilterByCategory">
                            <option value="">All Categories</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.CategoryID">@category.CategoryName</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="productSelect" class="form-label">Select Product:</label>
                        <select id="productSelect" class="form-control" @onchange="SelectProduct">
                            <option value="">Add New Product</option>
                            @foreach (var product in FilteredProducts)
                            {
                                <option value="@product.ProductID">@product.Name</option>
                            }
                        </select>
                    </div>

                    <ProductForm Product="@selectedProduct"
                                 Categories="@Categories"
                                 IsEditing="@isEditingProduct"
                                 OnSave="SaveProduct"
                                 OnClear="ClearFormProduct"
                                 OnDelete="DeleteProduct" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="border rounded p-4 shadow-sm">
                    <h2>Users</h2>
                    <div class="mb-3">
                        <label for="userSelect" class="form-label">Select User:</label>
                        <select id="userSelect" class="form-control" @onchange="SelectUser">
                            <option value="">Add New User</option>
                            @foreach (var user in Users)
                            {
                                <option value="@user.UserID">@user.Username</option>
                            }
                        </select>
                    </div>
                    <EditForm Model="@selectedUser" OnValidSubmit="SaveUser">
                        <div class="mb-3">
                            <label for="username" class="form-label">Username:</label>
                            <InputText id="username" class="form-control" @bind-Value="selectedUser.Username" />
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password:</label>
                            <InputText id="password" class="form-control" @bind-Value="password" Type="password" />
                        </div>
                        <div class="mb-3">
                            <label for="roleSelect" class="form-label">Role:</label>
                            <select id="roleSelect" class="form-control" @bind="selectedUser.RoleID">
                                @foreach (var role in Roles)
                                {
                                    <option value="@role.RoleID">@role.RoleName</option>
                                }
                            </select>
                        </div>
                        <div class="text-end">
                            <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">@((isEditingUser ? "Update" : "Add"))</Button>
                            <Button Color="ButtonColor.Secondary" @onclick="ClearFormUser">Clear</Button>
                            @if (isEditingUser)
                            {
                                <Button Color="ButtonColor.Danger" @onclick="(() => DeleteUser(selectedUser))">Delete</Button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Product> Products = new();
    private List<Category> Categories = new();
    private List<Product> FilteredProducts = new();
    private List<User> Users = new();
    private List<Role> Roles = new();

    private Product selectedProduct = new();
    private Category selectedCategory = new();
    private User selectedUser = new();

    private string password = string.Empty;

    private bool isEditingProduct = false;
    private bool isEditingCategory = false;
    private bool isEditingUser = false;

    private string notificationMessage = string.Empty;
    private bool isNotificationVisible = false;

    private bool IsAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        if (_currentUser != null)
        {
            await InitializePageData();
        }
    }

    private User? _currentUser;

    private bool isRendered;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await UserService.GetCurrentUserAsync();
            if (result != null)
            {
                _currentUser = result;
                isRendered = true;
                await InitializePageData();
                StateHasChanged();
            }
        }
    }

    private async Task InitializePageData()
    {
        IsAdmin = _currentUser?.RoleID == (int)RolesEnum.Admin;

        if (!IsAdmin)
        {
            NavigationManager.NavigateTo("/products");
            return;
        }

        Roles = await UserService.GetRolesAsync();
        Categories = await ProductService.GetCategoriesAsync();
        Products = await ProductService.GetAllProductsAsync();
        FilteredProducts = Products;
        Users = await UserService.GetAllUsersAsync();
    }

    private void ClearFormCategory()
    {
        selectedCategory = new Category();
        isEditingCategory = false;
    }

    private async Task SaveCategory(Category category)
    {
        if (!string.IsNullOrWhiteSpace(category.CategoryName))
        {
            if (isEditingCategory)
            {
                await ProductService.UpdateCategoryAsync(category);
                ShowNotification("Category updated successfully.");
            }
            else
            {
                await ProductService.AddCategoryAsync(category);
                ShowNotification("Category added successfully.");
            }

            Categories = await ProductService.GetCategoriesAsync();
            ClearFormCategory();
        }
    }

    private void SelectCategory(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var categoryId))
        {
            selectedCategory = Categories.FirstOrDefault(c => c.CategoryID == categoryId) ?? new Category();
            isEditingCategory = true;
        }
        else
        {
            ClearFormCategory();
        }
    }

    private void ClearFormProduct()
    {
        selectedProduct = new Product();
        isEditingProduct = false;
    }

    private async Task SaveProduct(Product product)
    {
        if (isEditingProduct)
        {
            await ProductService.UpdateProductAsync(product);
            ShowNotification("Product updated successfully.");
        }
        else
        {
            await ProductService.AddProductAsync(product, product.ImageData!);
            ShowNotification("Product added successfully.");
        }

        Products = await ProductService.GetAllProductsAsync();
        FilteredProducts = Products;
        ClearFormProduct();
    }

    private void SelectProduct(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var productId))
        {
            selectedProduct = Products.FirstOrDefault(p => p.ProductID == productId) ?? new Product();
            isEditingProduct = true;
        }
        else
        {
            ClearFormProduct();
        }
    }

    private async Task DeleteCategory(Category category)
    {
        await ProductService.DeleteCategoryAsync(category);
        Categories = await ProductService.GetCategoriesAsync();
        ClearFormCategory();
        ShowNotification("Category deleted successfully.");
    }

    private async Task DeleteProduct(Product product)
    {
        await ProductService.DeleteProductAsync(product);
        Products = await ProductService.GetAllProductsAsync();
        FilteredProducts = Products;
        ClearFormProduct();
        ShowNotification("Product deleted successfully.");
    }

    private void ClearFormUser()
    {
        selectedUser = new User();
        password = string.Empty;
        isEditingUser = false;
    }

    private async Task SaveUser()
    {
        if (!string.IsNullOrWhiteSpace(password))
        {
            selectedUser.PasswordHash = UserService.HashPassword(selectedUser, password);
        }

        if (isEditingUser)
        {
            await UserService.UpdateUserAsync(selectedUser);
            ShowNotification("User updated successfully.");
        }
        else
        {
            await UserService.AddUserAsync(selectedUser);
            ShowNotification("User added successfully.");
        }

        Users = await UserService.GetAllUsersAsync();
        ClearFormUser();
    }

    private async Task DeleteUser(User user)
    {
        await UserService.DeleteUserAsync(user);
        Users = await UserService.GetAllUsersAsync();
        ClearFormUser();
        ShowNotification("User deleted successfully.");
    }

    private void SelectUser(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var userId))
        {
            selectedUser = Users.FirstOrDefault(u => u.UserID == userId) ?? new User();
            isEditingUser = true;
        }
        else
        {
            ClearFormUser();
        }
    }

    private void FilterByCategory(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var categoryId))
        {
            FilteredProducts = Products.Where(p => p.CategoryID == categoryId).ToList();
        }
        else
        {
            FilteredProducts = Products;
        }
    }

    private void ShowNotification(string message)
    {
        notificationMessage = message;
        isNotificationVisible = true;
    }

    private void ClearNotification()
    {
        isNotificationVisible = false;
        notificationMessage = string.Empty;
    }
}